--
--  Model for the AADL book.
--
--  More details on the book on
--  http://julien.gunnm.org/aadl-book
--
--
--  Copyright Â© 2016 Julien Delange <julien@gunnm.org>
--  This work is free. You can redistribute it and/or modify it under the
--  terms of the Do What The Fuck You Want To Public License, Version 2,
--  as published by Sam Hocevar. See the COPYING file for more details.
--

package aadlbook::devices


public

with aadlbook::icd;
with aadlbook::platform;
with emv2;
with arp4761;
 
-----------------------------------
--  Camera and Object Detection  --
-----------------------------------
   
device camera
features
	picture : out data port aadlbook::icd::picture;
flows
	f0 : flow source picture;
properties 
	Period => 200ms;
	compute_execution_time => 20 ms .. 50 ms;
annex EMV2 {**
	use types 		ErrorLibrary;

	error propagations
		picture : out propagation {ItemOmission};
	flows
		ef0 : error source picture{ItemOmission};
	end propagations;

	properties
	    emv2::occurrencedistribution => [ probabilityValue => 0.01e-4 ; Distribution => Poisson;] applies to picture.itemomission;
		emv2::severity => ARP4761::Major applies to picture.itemomission;
		emv2::likelihood => ARP4761::Probable applies to picture.itemomission;
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "ItemOmission";
				phases => ("all");
				description => "No picture from the camera";
				comment => "Would impact the detection of obstacle if the radar is not working as well";
			])
			applies to picture.itemomission;
**};	
end camera;

device radar
features
	distance_estimate : out data port aadlbook::icd::obstacle_position.i;
flows
	f0 : flow source distance_estimate;
properties 
	Period => 10ms;
	compute_execution_time => 6 ms .. 8 ms;
annex EMV2 {**
	use types 		ErrorLibrary;

	error propagations
		distance_estimate : out propagation {ItemOmission,OutOfRange};
	flows
		ef0 : error source distance_estimate{ItemOmission,OutOfRange};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to distance_estimate.ItemOmission;
		emv2::likelihood => ARP4761::Probable applies to distance_estimate.ItemOmission;
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "ItemOmission";
				phases => ("all");
				description => "No information from the Radar";
				comment => "Error if both the camera and the radar does not send any value";
			])
			applies to distance_estimate.ItemOmission;

		emv2::severity => ARP4761::Minor applies to distance_estimate.OutOfRange;
		emv2::likelihood => ARP4761::Probable applies to distance_estimate.OutOfRange;
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "OutOfRange";
				phases => ("all");
				description => "Invalid distance sent by the radar";
				comment => "First occurrences of invalid data Should be handled by the distance estimator.";
			])
			applies to distance_estimate.OutOfRange;
**};
end radar;
 
---------------------
--  Speed Sensors  --
---------------------

device speed_sensor
features
	speed : out data port aadlbook::icd::speed;
flows
	f0 : flow source speed;
annex EMV2 {**
	use types 		ErrorLibrary;

	error propagations
		speed : out propagation {ItemOmission,OutOfRange};
	flows
		ef0 : error source speed{ItemOmission,OutOfRange};
	end propagations;

	properties
		emv2::severity => ARP4761::Major applies to speed.OutOfRange;
		emv2::likelihood => ARP4761::Probable applies to speed.OutOfRange;
		emv2::severity => ARP4761::Major applies to speed.ItemOmission;
		emv2::likelihood => ARP4761::Probable applies to speed.ItemOmission;
**};
end speed_sensor; 

device speed_wheel_sensor extends speed_sensor
properties
	Period => 10ms;
	compute_execution_time => 6 ms .. 9 ms;
annex EMV2 {**
	properties
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "OutOfRange";
				phases => ("all");
				description => "Invalid value from wheel sensor";
				comment => "The speed sensor sends invalid value. This should be then discovered and handled by the speed controller.";
			])
			applies to speed.OutOfRange;	
			
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "ItemOmission";
				phases => ("all");
				description => "No speed from wheel sensor";
				comment => "The sensor does not sendn any speed, might be an error if all sensors does not send a consistent value";
			])
			applies to speed.ItemOmission;
**};
end speed_wheel_sensor;

device speed_laser_sensor extends speed_sensor
properties
	Period => 10ms;
	compute_execution_time => 6 ms .. 9 ms;
annex EMV2 {**
	properties
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "OutOfRange";
				phases => ("all");
				description => "Invalid value from laser sensor";
				comment => "The speed sensor sends invalid value. This should be then discovered and handled by the speed controller.";
			])
			applies to speed.OutOfRange;	
			
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "ItemOmission";
				phases => ("all");
				description => "No speed from laser sensor";
				comment => "The sensor does not sendn any speed, might be an error if all sensors does not send a consistent value";
			])
			applies to speed.ItemOmission;
**};
end speed_laser_sensor;


-------------
--  Brake  --
-------------

device brake 
features
	cmd : in data port aadlbook::icd::brake_cmd;
flows
	f0 : flow sink cmd;
properties
	Period => 2 ms; 
annex EMV2 {**
	use types 		ErrorLibrary;
	use behavior  	ErrorLibrary::FailStop;

	error propagations
		cmd : in propagation {ItemOmission,OutOfRange};
	flows
		ef0 : error sink cmd{ItemOmission,OutOfRange};
	end propagations;
	
	component error behavior
	events
		Reset : recover event;
	transitions
		t0 : Operational -[cmd{ItemOmission}]-> FailStop;
		t1 : Operational -[cmd{OutOfRange}]-> FailStop;
		t2 : FailStop -[Reset]-> Operational;
	end component;
**};
end brake;

device acceleration
features
	cmd : in data port aadlbook::icd::speed_cmd;
flows
	f0 : flow sink cmd;
properties
	Period => 2 ms;
annex EMV2 {** 
	use types 		ErrorLibrary;
	use behavior  	ErrorLibrary::FailStop;

	error propagations
		cmd : in propagation {ItemOmission,OutOfRange};
	flows
		ef0 : error sink cmd{ItemOmission,OutOfRange};
	end propagations;
	
	
	component error behavior
	events
		Reset : recover event;
	transitions
		t0 : Operational -[cmd{ItemOmission}]-> FailStop;
		t1 : Operational -[cmd{OutOfRange}]-> FailStop;
		t2 : FailStop -[Reset]-> Operational;
	end component;
**};
end acceleration;

device panel
features
	increase_speed : out event port;
	decrease_speed : out event port;
flows
	f80 : flow source increase_speed;
annex EMV2 {**
	use types 		ErrorLibrary;
	use behavior  	ErrorLibrary::FailStop;

	error propagations
		increase_speed : out propagation {ItemOmission};
		decrease_speed : out propagation {ItemOmission};
	flows
		ef0 : error source increase_speed{ItemOmission};
		ef1 : error source decrease_speed{ItemOmission};
	end propagations;
**};
end panel;

device screen
features
	tire_pressure : in data port aadlbook::icd::pressure;
	desired_speed : in data port aadlbook::icd::speed;
	actual_speed : in data port aadlbook::icd::speed;
	warning : in data port aadlbook::icd::boolean;
	entertainment_infos : in data port aadlbook::icd::entertainment_infos;
flows
	f0 : flow sink warning;
annex EMV2 {**
	use types 		ErrorLibrary;
	use behavior  	ErrorLibrary::FailStop;

	error propagations
		tire_pressure : in propagation {OutOfRange};
		desired_speed : in propagation {ItemOmission,OutOfRange};
		actual_speed : in propagation {ItemOmission,OutOfRange};
		warning : in propagation {ItemOmission};
	flows
		ef0 : error sink tire_pressure{OutOfRange};
		ef1 : error sink desired_speed{ItemOmission};
		ef2 : error sink desired_speed{OutOfRange};
		ef3 : error sink actual_speed{ItemOmission};
		ef4 : error sink actual_speed{OutOfRange};
		ef5 : error sink warning{ItemOmission};
	end propagations;
**};
end screen;

device tpms
features
	pressure : out data port aadlbook::icd::pressure;
end tpms;

device bluetooth_controller
features
	bt        : requires bus access aadlbook::platform::bluetooth;
	music     : out data port aadlbook::icd::music.i;
	contacts  : out data port aadlbook::icd::contacts.i;
end bluetooth_controller;

device speaker
features
	music  : in data port aadlbook::icd::music.i;
flows
	f0 : flow sink music;
end speaker;

end aadlbook::devices;